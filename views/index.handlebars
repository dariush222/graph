<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="https://code.jquery.com/jquery-3.1.0.min.js"></script>
<style>
svg {
border-style: solid;
    border-width: 5px;
    margin-left:auto; margin-right:auto; display:block;
}
.link {
  stroke: #000;
  stroke-width: 1.5px;
}

.node {
  cursor: move;
  fill: #ccc;
  stroke: #000;
  stroke-width: 1.5px;
}

.node.fixed {
  fill: #f00;
}
.node.selected {
  fill: #0ff;
}

text {
  font: 12px sans-serif;
  pointer-events: none;
}

</style>
<button id="wholegraph">Load whole graph</button>

<script>
    var graph = {{{grph}}};
    var width = 960,
            height = 500;
    var svg = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);

    function updategraph() {
        svg.remove();

         svg = d3.select("body").append("svg")
                .attr("width", width)
                .attr("height", height);
        var force = d3.layout.force()
                .nodes(graph.nodes)
                .links(graph.links)
                .size([width, height])
                .linkDistance(100)
                .charge(-500)
                .on("tick", tick)
                .start();


        var link = svg.selectAll(".link")
                .data(force.links())
                .enter().append("line")
                .attr("class", "link");

        var node = svg.selectAll(".node")
                .data(force.nodes())
                .enter().append("g")
                .attr("class", "node")
                .on("mouseover", mouseover)
                .on("mouseout", mouseout)
                .on("click", clck);

        node.append("circle")
                .attr("r", 8);

        node.append("text")
                .attr("x", 12)
                .attr("dy", ".35em")
                .text(function(d) { return d.name; });

        function tick() {
            link
                    .attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });

            node
                    .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
        }

    }


function mouseover(d) {
    d3.select(this).classed("selected", d.selected = true);
    d3.select(this).select("circle").transition()
            .duration(750)
            .attr("r", 16);
}

function mouseout(d) {
    d3.select(this).classed("selected", d.selected = false);
    d3.select(this).select("circle").transition()
            .duration(750)
            .attr("r", 8);
}
function clck(d) {
    var data = {};
    data.title = "Get Relations";
    data.nodename = d.name;
 
    $.ajax({
        type: 'POST',
        data: JSON.stringify(data),
        contentType: 'application/json',
        url: 'http://localhost:3000/getsubgraph',
        success: function(data) {
            graph = data;
            updategraph();
        },
        error: function (xhr, status, error) {
            console.log('Error: ' + error.message);
            $('#lblResponse').html('Error connecting to the server.');
        }
    });

}
    $("#wholegraph")
            .on("click",function(){
                var data = {};
                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    url: 'http://localhost:3000/getwholegraph',
                    success: function(data) {
                        graph = data;
                        updategraph();
                    },
                    error: function (xhr, status, error) {
                        console.log('Error: ' + error.message);
                    }
            });
            });

</script>